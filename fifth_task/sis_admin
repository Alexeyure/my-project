Общая информация о системе:
1. Название проекта: my_project
2.Облачный провайдер: vk_cloud (VK)
Расположение системы: Хабаровск
• VPN: Москва
Аккаунты и доступ: Алексей alex@local


Список доменных имён и статических адресов:

1. VPN-сервер:
   • Доменное имя: openvpn1
   • Статический IP: 90.156.218.220

2. Prometheus:
   • Доменное имя: alexprometheus
   • Статический IP: 192.168.1.9

3. easy-rsa
   • Доменное имя: rsa1
   • Статический IP: 83.166.233.230
4. бэкап
   • Доменное имя: alexbk
   • Статический IP: 192.168.1.8




Настройка серверов:

1. Настройка удостоверяющего центра easy-rsa:
   • В первую очередь необходимо создать удалённую машину, например с помощью платформы VK_cloud. 
   • Зарегистрироваться или войти в свой аккаунт 
   • Создать виртуальную машину, следуя инструкции и подсказкам системы
   • Далее необходимо войти в github, где уже приготовлены все нужные скрипты и дебпакеты
   • Перейти в my_project, first_task и воспользоваться скриптом под названием script_easy_rsa.sh
   • Далее необходимо настроить безопасность машины, чтобы оставить ей только 22 порт для подключения по ssh и передачи файлов по scp:
     - sudo apt-get update
     - sudo apt-get install netfilter-persistent
     - Сбросим все настройки iptables
       iptables -F
       iptables -X
       iptables -Z
     - iptables -A INPUT -i lo -j ACCEPT
       iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
       iptables -A INPUT -p tcp --dport 22 -j ACCEPT
       sudo netfilter-persistent save
    • Выполнив приведённые выше шаги, вы с лёгкостью установите и развернёте удостоверяющий центр easy-rsa


2. Настройка VPN сервера:
Подготавливаем почву для проверки OpenVpn(создаём виртуальную машину для клиента):
 - Необходимо создать виртуальную машину на базе Linux с помощью VirtualBox
 - Установить OpenVpn(sudo apt-get install openvpn)
   • Далее продолжаем настраивать VPN сервер
   • Зарегистрироваться или войти в свой аккаунт vk_cloud
   • Создать виртуальную машину, следуя инструкции и подсказкам системы
   • Необходимо настроить ssh подключение между VPN сервером и сервером с easy-rsa, для этого:
     - ssh по умолчанию устанавливается при создании машины в VK_cloud
     - Выполните команду ssh-keygen
     - Перейдите в .ssh и скопируйте содиржимое публичного ключа
     - Данный ключ необходимо перенести на другую машину в .ssh/authorized_keys
     - Поздравляю, вы настроили ssh соединение между вашими удалёнными серверами
   • Далее необходимо войти в github, где уже приготовлены все нужные скрипты и дебпакеты
   • Необходимо затянуть к себе на машину дебпакеты из my_project, second-task, deb (здесь находятся все необходимые дебпакеты)
   • Скопировать себе на машину скрипт script-vpn.sh
     - В него необходимо внести некоторые изменения, а именно заменить конфигурационные данные на свои
   • Далее скрипт выполнит за вас всю работу
Проверить работу VPN сервера можно подключившись к нему как клиент:
   - Необходимо перейти на машину, созданную для клиента, и выполнить команду: sudo openvpn ~/client-1.ovpn
Готово, VPN сервер создан, настроен и проверен на работоспособность


3. Настройка сервера для мониторинга (Prometheus)
   • В первую очередь необходимо создать удалённую машину, например с помощью платформы VK_cloud. 
   • Зарегистрироваться или войти в свой аккаунт 
   • Создать виртуальную машину, следуя инструкции и подсказкам системы
   • Далее необходимо войти в github, где уже приготовлены все нужные скрипты и дебпакеты  
   • Перейти в my_project, third-task, и затянуть к себе деб пакеты: debpac и conf-node-exporter
   • Далее нужно настроить ssh подключение между данным сервером и сервером с OpenVPN:
     - ssh по умолчанию устанавливается при создании машины в VK_cloud
     - Выполните команду ssh-keygen
     - Перейдите в .ssh и скопируйте содиржимое публичного ключа
     - Данный ключ необходимо перенести на другую машину в .ssh/authorized_keys
     - Поздравляю, вы настроили ssh соединение между вашими удалёнными серверами
   • Копируем себе скрипт под названием script-prometheus.sh, в нём необходимо изменить конфигурационные данные на свои
   • Дальше скрипт выполнит всю работу за вас
   • Чтобы настроить мониторинг за ВПН сервером нужно перейти в /etc/prometheus
     - Там необходимо создать алерты с разрешением .yml(необходимые алерты с кратким описанием находятся в там же где вы брали все неоюходимые скрипты и деб пакеты my_project/third-task/alerts)
     - После того, как вы добавили необходимые алерты, необходимо перейти в конфигурационный файл prometheus.yml(sudo vim prometheus.yml)
       - Там нужно добавить названия созданных алертов, после чего выходим(:wq)
     - Далее нужно настроить отправку уведомлений о сработавших алертах:
       - Переходим в файл alertmanager.yml (sudo vim alertmanager.yml) и меняем данные, использованные для примера, на свои. После чего выходим(:wq)
     - Перезагружаем службу alertmanager командой sudo systemctl restart prometheus-alertmanager
   • Запускаем firefox и переходим в прометеус, там можно просматривать всю информацию о наших алертах


4. Настройка сервера для резервных копий:
   • Намного безопаснее хранить резервные копии на 2 двух серверах(локальном и приватном репозитории gitHub)
   • Для создания локального сервера нам необходимо:
     - Создать виртуальную машину на базе Linux с помощью VirtualBox
     - Настроить на ней безопасность, а именно закрыть все ненужные порты, оставить только 22 порт для передачи файлов по ssh и подключению(См 1. Настройка удостоверяющего центра easy-rsa)
     - Установить с каждым из серверов, которые мы будем бэкапить ssh подключениу:
       - sudo apt-get update
       - sudo apt-get install openssh-client
       - Выполните команду ssh-keygen
       - Перейдите в .ssh и скопируйте содиржимое публичного ключа
       - Данный ключ необходимо перенести на другую машину в .ssh/authorized_keys
       - Поздравляю, вы настроили ssh соединение между вашими удалёнными серверами
     - Далее подключаемся по ssh к удалённой машине, где будем выполнять резервное копирование 
     - Переходим на наш GitHub fourth-task читаем файл README.md, там содержится информация о скриптах и где и как и правильно применить
     - Выполнив эти шаги вы развернёте бэкапирование для ваших серверов
    • Создаём приватный репозиторий на GitHub и копируем свой публичный ключ туда
      - Проверяем установлен ли git на нашей виртуальной машине командой git config --version
      - Выполняем следующие команды:
        git config --global user.name "вводим имя"
        git config --global user.email "вводим почту"
      - Создаём папку куда будем клонировать гит репозиторий mkdir ~/git && cd ~/git
      - Затягиваем репозиторий к себе на машину git clone <ссылка на репозиторий гит>
      - Переходим на наш GitHub fourth-task читаем файл README.md, находим скрипт scripts-git-bk.sh
      - Следуем инструкции из файла README.md 
Поздравляю вы организовали надежное резервное хранилище